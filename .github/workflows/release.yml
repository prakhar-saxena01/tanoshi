name: release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build-docker:
    runs-on: ubuntu-latest
    environment: default
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Create ARM64 Context
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.ARM64_NODE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.ARM64_NODE_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          docker context create node-arm64 --docker "host=ssh://${{ secrets.ARM64_NODE_USERNAME }}@${{ secrets.ARM64_NODE_HOST }}"
          docker buildx create --append --name ${{ steps.buildx.outputs.name }} --platform linux/arm64 node-arm64
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: faldez/tanoshi:latest,faldez/tanoshi:${{ env.RELEASE_VERSION }}
          build-args: |
            BUILD_WEB=false
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-web:
    runs-on: ubuntu-latest
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v2
      - name: Install trunk
        run: |
          wget -qO- https://github.com/thedodd/trunk/releases/download/v0.13.1/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf- -C $HOME/.cargo/bin
          chmod +x $HOME/.cargo/bin/trunk
      - name: Install wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown
      - name: Build tanoshi-web
        run: cd crates/tanoshi-web && trunk build --release
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: crates/tanoshi-web/dist
  build-desktop:
    runs-on: ${{ matrix.os }}
    needs:
      - build-web
      - create-release
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: crates/tanoshi-web/dist
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.58.0
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: tauri-cli --version ^1.0.0-rc --locked
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev lsb-release wget software-properties-common libwebkit2gtk-4.0-dev curl libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev libpango1.0-dev
      - name: Install deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat llvm@11
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0"
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Invoke-WebRequest -Uri https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/LLVM-11.0.1-win64.exe -OutFile LLVM-11.0.1-win64.exe
          7z x .\LLVM-11.0.1-win64.exe -aoa -o'C:\Program Files\LLVM'
      - name: Cache vcpkg
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-
      - name: Install deps
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md
      - name: Build tanoshi
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: marcopolo/cargo@master
        with:
          command: tauri
          args: build
          working-directory: crates/tanoshi
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
      - name: Build tanoshi
        if: ${{ matrix.os == 'macos-latest' }}
        uses: marcopolo/cargo@master
        with:
          command: tauri
          args: build
          working-directory: crates/tanoshi
        env:
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
      - name: Build tanoshi
        if: ${{ matrix.os == 'windows-latest' }}
        uses: marcopolo/cargo@master
        with:
          command: tauri
          args: build
          working-directory: crates/tanoshi
        env:
          LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/bundle/deb/*.deb
      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/bundle/appimage/tanoshi_*.AppImage
      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/bundle/dmg/*.dmg
      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/bundle/msi/*.msi
  build:
    runs-on: ${{ matrix.os }}
    needs:
      - build-web
      - create-release
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            filename: tanoshi
            asset: tanoshi-linux
          - os: macos-latest
            filename: tanoshi
            asset: tanoshi-macos
          - os: windows-latest
            filename: tanoshi.exe
            asset: tanoshi-win.exe
    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: crates/tanoshi-web/dist
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev lsb-release wget software-properties-common libwebkit2gtk-4.0-dev curl libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev libpango1.0-dev
      - name: Install deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat llvm@11
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Invoke-WebRequest -Uri https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/LLVM-11.0.1-win64.exe -OutFile LLVM-11.0.1-win64.exe
          7z x .\LLVM-11.0.1-win64.exe -aoa -o'C:\Program Files\LLVM'
      - name: Download LLVM
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Invoke-WebRequest -Uri https://github.com/faldez/tanoshi-builder/releases/download/v0.1.0/LLVM.7z -OutFile LLVM.7z
          7z x .\LLVM.7z -o'C:\'
      - name: Cache vcpkg
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-
      - name: Install deps
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.58.0
          override: true
      - name: Build tanoshi
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p tanoshi --release
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
          LLVM_SYS_110_PREFIX: ${{ env.LLVM_PATH }}
      - name: Build tanoshi
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p tanoshi --release
        env:
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
          LLVM_SYS_110_PREFIX: /usr/local/opt/llvm
      - name: Build tanoshi
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p tanoshi --release
        env:
          LLVM_SYS_110_PREFIX: C:\LLVM
          LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/${{ matrix.filename }}
          asset_name: ${{ matrix.asset }}
          asset_content_type: application/octet-stream
